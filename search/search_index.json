{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CodeIgniter HTMX Documentation","text":"<p>This library is set of methods for <code>IncomingRequest</code>, <code>Response</code> and <code>RedirectResponse</code> classes to help you work with htmx fluently in CodeIgniter 4 framework.</p> <p>It also provides some additional help with handling errors in development mode as well as support for view fragments.</p> <ul> <li>Installation</li> <li>Error handling</li> <li>View fragments</li> <li>IncomingReqeuest</li> <li>Response</li> <li>RediretResponse</li> <li>Troubleshooting</li> </ul>"},{"location":"#demos","title":"Demos","text":"<p>https://github.com/michalsn/codeigniter-htmx-demo</p>"},{"location":"error_handling/","title":"Error handling","text":"<p>By default, when an HTTP error response occurs, htmx is not displaying the error. This library changes it so that in the development mode, errors are displayed in a modal window.</p>"},{"location":"incoming_request/","title":"IncomingRequest","text":"<p>Available methods:</p> <ul> <li>isHtmx()</li> <li>isBoosted()</li> <li>isHistoryRestoreRequest()</li> <li>getCurrentUrl()</li> <li>getPrompt()</li> <li>getTarget()</li> <li>getTrigger()</li> <li>getTriggerName()</li> <li>getTriggeringEvent()</li> <li>is()</li> </ul>"},{"location":"incoming_request/#ishtmx","title":"isHtmx()","text":"<p>Checks if there is a <code>HX-Request</code> header in place. Indicates that the request was fired with htmx.</p> <pre><code>$this-&gt;request-&gt;isHtmx();</code></pre>"},{"location":"incoming_request/#isboosted","title":"isBoosted()","text":"<p>Checks if there is a <code>HX-Boosted</code> header in place. Indicates that the request is via an element using hx-boost</p> <pre><code>$this-&gt;request-&gt;isBoosted();</code></pre>"},{"location":"incoming_request/#ishistoryrestorerequest","title":"isHistoryRestoreRequest()","text":"<p>Checks if there is a <code>HX-History-Restore-Request</code> header in place. True if the request is for history restoration after a miss in the local history cache.</p> <pre><code>$this-&gt;request-&gt;isHistoryRestoreRequest();</code></pre>"},{"location":"incoming_request/#getcurrenturl","title":"getCurrentUrl()","text":"<p>Checks the <code>HX-Current-URL</code> header and return current URL of the browser.</p> <pre><code>$this-&gt;request-&gt;getCurrentUrl();</code></pre>"},{"location":"incoming_request/#getprompt","title":"getPrompt()","text":"<p>Checks the <code>HX-Prompt</code> header - the user response to an hx-prompt.</p> <pre><code>$this-&gt;request-&gt;getPrompt();</code></pre>"},{"location":"incoming_request/#gettarget","title":"getTarget()","text":"<p>Checks the <code>HX-Target</code> header. Returns the <code>id</code> of the target element if it exists.</p> <pre><code>$this-&gt;request-&gt;getTarget();</code></pre>"},{"location":"incoming_request/#gettrigger","title":"getTrigger()","text":"<p>Checks the <code>HX-Trigger</code> header. Returns the <code>id</code> of the triggered element if it exists.</p> <pre><code>$this-&gt;request-&gt;getTrigger();</code></pre>"},{"location":"incoming_request/#gettriggername","title":"getTriggerName()","text":"<p>Checks the <code>HX-Trigger-Name</code> header. Returns the <code>name</code> of the triggered element if it exists.</p> <pre><code>$this-&gt;request-&gt;getTriggerName();</code></pre>"},{"location":"incoming_request/#gettriggeringevent","title":"getTriggeringEvent()","text":"<p>Checks the <code>Triggering-Event</code> header. The value of the header is a JSON serialized version of the event that triggered the request. Check the event-header plugin for more information.</p>"},{"location":"incoming_request/#is","title":"is()","text":"<p>This new method is available in CodeIgniter since v4.3. It's a handful shortcut and alternative to another CodeIgniter method: <code>getMethod()</code>. But it also provides different types of checks - you can read more about it in the user guide.</p> <p>Along with this library, we added two new parameters that can be used: <code>htmx</code> and <code>boosted</code> which are equivalent of using <code>isHtmx()</code> and <code>isBoosted()</code> methods.</p> <pre><code>$this-&gt;request-&gt;is('htmx');\n// or\n$this-&gt;request-&gt;is('boosted');</code></pre>"},{"location":"installation/","title":"Installation","text":"<ul> <li>Composer Installation</li> <li>Manual Installation</li> </ul>"},{"location":"installation/#composer-installation","title":"Composer Installation","text":"<p>The only thing you have to do is to run this command, and you're ready to go.</p> <pre><code>composer require michalsn/codeigniter-htmx</code></pre>"},{"location":"installation/#manual-installation","title":"Manual Installation","text":"<p>In the example below we will assume, that files from this project will be located in <code>app/ThirdParty/htmx</code> directory.</p> <p>Download this project and then enable it by editing the <code>app/Config/Autoload.php</code> file and adding the <code>Michalsn\\CodeIgniterHtmx</code> namespace to the <code>$psr4</code> array. You also have to add <code>Common.php</code> to the <code>$files</code> array, like in the below example:</p> <pre><code>&lt;?php\n\n...\n\npublic $psr4 = [\n    APP_NAMESPACE =&gt; APPPATH, // For custom app namespace\n    'Config'      =&gt; APPPATH . 'Config',\n    'Michalsn\\CodeIgniterHtmx' =&gt; APPPATH . 'ThirdParty/htmx/src',\n];\n\n...\n\npublic $files = [\n    APPPATH . 'ThirdParty/htmx/src/Common.php',\n];</code></pre>"},{"location":"redirect_response/","title":"RedirectResponse","text":"<p>Available methods:</p> <ul> <li>hxLocation()</li> <li>hxRedirect()</li> <li>hxRefresh()</li> </ul>"},{"location":"redirect_response/#hxlocation","title":"hxLocation()","text":"<p>Sets the <code>HX-Location</code> header to redirect without reloading the whole page.</p> <pre><code>return redirect()-&gt;hxLocation('/path');</code></pre> <p>For more information, please see hx-location.</p>"},{"location":"redirect_response/#hxredirect","title":"hxRedirect()","text":"<p>Can be used to do a client-side redirect to a new location.</p> <pre><code>return redirect()-&gt;hxRedirect('/path');</code></pre>"},{"location":"redirect_response/#hxrefresh","title":"hxRefresh()","text":"<p>If called the client side will do a full refresh of the page.</p> <pre><code>return redirect()-&gt;hxRefresh();</code></pre>"},{"location":"response/","title":"Response","text":"<p>Available methods:</p> <ul> <li>setPushUrl()</li> <li>setReplaceUrl()</li> <li>setReswap()</li> <li>setRetarget()</li> <li>triggerClientEvent()</li> </ul>"},{"location":"response/#setpushurl","title":"setPushUrl()","text":"<p>Sets the value in <code>HX-Push-Url</code> header. Pushes a new url into the history stack.</p> <pre><code>$this-&gt;response-&gt;setPushUrl('/pushed-url');</code></pre>"},{"location":"response/#setreplaceurl","title":"setReplaceUrl()","text":"<p>Sets the value in <code>HX-Replace-Url</code> header. Replaces the current URL in the location bar.</p> <pre><code>$this-&gt;response-&gt;setReplaceUrl('/replaced-url');</code></pre>"},{"location":"response/#setreswap","title":"setReswap()","text":"<p>Sets the value in <code>HX-Reswap</code> header. Allows you to specify how the response will be swapped. See hx-swap for possible values.</p> <pre><code>$this-&gt;response-&gt;setReswap('innerHTML show:#another-div:top');</code></pre>"},{"location":"response/#setretarget","title":"setRetarget()","text":"<p>Sets the value in <code>HX-Retarget</code> header. A CSS selector that updates the target of the content update to a different element on the page.</p> <pre><code>$this-&gt;response-&gt;setRetarget('#another-div');</code></pre>"},{"location":"response/#triggerclientevent","title":"triggerClientEvent()","text":"<p>Allows you to set the headers: <code>HX-Trigger</code>, <code>HX-Trigger-After-Settle</code> or <code>HX-Trigger-After-Swap</code>.</p> <p>This method has 3 parameters: * <code>name</code> * <code>params</code> * <code>method</code> - which can be one of: <code>receive</code> (default), <code>settle</code>, <code>swap</code>.</p> <pre><code>$this-&gt;response-&gt;triggerClientEvent('showMessage', ['level' =&gt; 'info', 'message' =&gt; 'Here Is A Message']);</code></pre> <p>For more information, please see hx-trigger.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#phpstan","title":"PHPStan","text":""},{"location":"troubleshooting/#request","title":"Request","text":"<p>If you keep getting PHPStan error whenever you use any new request method, like <code>isHtmx()</code>, example:</p> <p><code>Call to an undefined method CodeIgniter\\HTTP\\CLIRequest|CodeIgniter\\HTTP\\IncomingRequest::isHtmx().</code></p> <p>Please edit your <code>BaseController</code> and replace</p> <ul> <li><code>use CodeIgniter\\HTTP\\IncomingRequest;</code> with</li> <li><code>use Michalsn\\CodeIgniterHtmx\\HTTP\\IncomingRequest;</code></li> </ul>"},{"location":"troubleshooting/#response","title":"Response","text":"<p>If you keep getting PHPStan error whenever you use any new response method, like <code>setPushUrl()</code>, example:</p> <p><code>Call to an undefined method CodeIgniter\\HTTP\\ResponseInterface::setPushUrl().</code></p> <p>Please edit your <code>BaseController</code> and add:</p> <ul> <li><code>use Michalsn\\CodeIgniterHtmx\\HTTP\\Response;</code> before a class definition</li> <li>And a class variable with description:</li> </ul> <pre><code> /**\n   * Instance of the main Response object.\n   *\n   * @var Response\n   */\n  protected $response;</code></pre>"},{"location":"view_fragments/","title":"View fragments","text":"<p>We can use view fragments inside our views. The syntax is similar to one known from \"Sections\", example:</p> <pre><code>// app/Views/page.php\n...\n&lt;h2&gt;Page header&lt;/h2&gt;\n&lt;?php $this-&gt;fragment('example'); ?&gt;\n    &lt;table&gt;\n        &lt;caption&gt;&lt;?= $caption; ?&gt;&lt;/caption&gt;\n        ...\n    &lt;/table&gt;\n&lt;?php $this-&gt;fragmentEnd(); ?&gt;\n&lt;div&gt;\n    ...\n&lt;/div&gt;\n...</code></pre> <p>Now, if we make a normal call to the <code>view('page')</code>, the view will be returned as usual. But if we make a call with a new function <code>view_fragment('page', 'example')</code>, the whole view will be parsed as before, but we will get only the part inside the fragment \"example\".</p> <pre><code>class Home extends BaseController\n{\n    public function page(): string\n    {\n        return view('page', ['caption' =&gt; 'Full page returned']);\n    }\n\n    public function pageFragment(): string\n    {\n        return view_fragment('page', 'example', ['caption' =&gt; 'Only page fragment returned']);\n    }\n}</code></pre> <p>We can return multiple fragments at the same time. Just separate each fragment with a comma or assign an array instead of a string.</p>"}]}